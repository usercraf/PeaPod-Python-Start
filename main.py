import asyncio
import random
from aiogram.filters.command import Command

from aiogram import Bot, Dispatcher, types
from aiogram.exceptions import TelegramNetworkError
from aiogram.utils.keyboard import InlineKeyboardBuilder

from key_file import TOKEN
from log_file import logger
from db_file import cur, base

bot = Bot(token=TOKEN)
dp = Dispatcher()

def button_admin():
    return {
        'add_student':'üßë‚Äçüéì –î–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞',
        'del_student': '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞',
        'add_stars': 'üåü –î–æ–¥–∞—Ç–∏ –∑—ñ—Ä–æ—á–∫–∏',
        'add_home_work': 'üìö –î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è',
    }

def buttons_students():
    return {
        'home_work_students':'üìö –î–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è',
        'chek_start':'üåü –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—ñ—Ä–æ—á–æ–∫',
    }

def generate_unique_code():
    while True:
        code = "{:06d}".format(random.randint(100000, 999999))
        exists = cur.execute("SELECT 1 FROM students WHERE code = ?", (code,)).fetchone()
        if not exists:
            return int(code)

@dp.message(Command("start"))
async def start_bot(message: types.Message):
    role = cur.execute("""SELECT role FROM students WHERE tg_id=?""", (message.from_user.id,)).fetchone()
    builder = InlineKeyboardBuilder()
    if role[0] == 'ADMIN':
        for key, value in button_admin().items():
            builder.add(types.InlineKeyboardButton(text=value, callback_data=key))
        builder.adjust(1)
        await message.answer(f'–í—ñ—Ç–∞—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ {message.from_user.first_name}, —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏?',
                             reply_markup=builder.as_markup())
    elif role[0] == 'student':
        for key, value in buttons_students().items():
            builder.add(types.InlineKeyboardButton(text=value, callback_data=key))
        builder.adjust(1)
        await message.answer(f'–í—ñ—Ç–∞—é —Ç–µ–±–µ {message.from_user.first_name}, —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏?',
                             reply_markup=builder.as_markup())
    else:
        builder.add(types.InlineKeyboardButton(text='–¢—É—Ç', callback_data='verification'))
        await message.answer('–í–µ—Ä–∏—Ñ—ñ–∫—É–π—Å—è', reply_markup=builder.as_markup())


async def main():
    tryings = 0
    while True:
        try:
            print("üöÄ Bot run")
            await dp.start_polling(bot)
        except TelegramNetworkError as e:
            tryings += 1
            logger.warning(f"‚ö†Ô∏è TelegramNetworkError: {e}. –°–ø—Ä–æ–±–∞ ‚Ññ{tryings}")
            await asyncio.sleep(1.0 * tryings)
        except Exception as e:
            logger.exception(f"üí• –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ polling: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())