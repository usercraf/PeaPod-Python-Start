import asyncio

from aiogram.filters.command import Command

from aiogram import Bot, Dispatcher, types, F
from aiogram.exceptions import TelegramNetworkError
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from key_file import TOKEN, buttons_students, button_admin
from log_file import logger
from db_file import base
from student_file import students_router
from admin_file import admin_router

bot = Bot(token=TOKEN)
dp = Dispatcher()

def clear_unread_results(cur):
    try:
        while cur.nextset():
            pass
    except:
        pass

async def send_main_menu(user_id: int, user_name: str, send_func):
    try:
        if not base.is_connected():
            base.reconnect()

        with base.cursor() as cur:
            try:
                while cur.nextset():  # –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤
                    pass
            except Exception:
                pass

            cur.execute("SELECT role, verification FROM students WHERE tg_id=%s", (user_id,))
            data = cur.fetchone()

        builder = InlineKeyboardBuilder()

        if data is None:
            builder.add(types.InlineKeyboardButton(text='‚¨áÔ∏è –¢—É—Ç', callback_data='verification'))
            await send_func("ü§∑üèº‚Äç‚ôÇÔ∏è –í–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –±–∞–∑—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É–π—Å—è.",
                            reply_markup=builder.as_markup())
            return

        role, verification = data

        if role == 'ADMIN':
            for key, value in button_admin().items():
                builder.add(types.InlineKeyboardButton(text=value, callback_data=key))
            builder.adjust(1)
            await send_func(f'üí™ –í—ñ—Ç–∞—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ {user_name}, —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏?',
                            reply_markup=builder.as_markup())

        elif role == 'student' and verification == 1:
            for key, value in buttons_students().items():
                builder.add(types.InlineKeyboardButton(text=value, callback_data=key))
            builder.adjust(1)
            await send_func(f'üêç –í—ñ—Ç–∞—é —Ç–µ–±–µ {user_name}, —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏?',
                            reply_markup=builder.as_markup())

        else:
            builder.add(types.InlineKeyboardButton(text='‚¨áÔ∏è –¢—É—Ç', callback_data='verification'))
            await send_func('üîê –í–µ—Ä–∏—Ñ—ñ–∫—É–π—Å—è', reply_markup=builder.as_markup())

    except Exception as e:
            logger.exception(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ send_main_menu: {e}")
            await send_func("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(Command("start"))
async def start_bot(message: types.Message):
    try:
        await send_main_menu(
            user_id=message.from_user.id,
            user_name=message.from_user.first_name,
            send_func=message.answer
        )
    except TelegramBadRequest as e:
        logger.error(f'‚ùå BadRequest: {e}')
        await message.answer('‚ùå –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
    except TelegramForbiddenError as e:
        logger.error(f'‚õîÔ∏è Forbidden: {e}')
        await message.answer('‚õîÔ∏è –í–∏ –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞ –∞–±–æ –≤–∏–¥–∞–ª–∏–ª–∏ —á–∞—Ç.')


@dp.callback_query(F.data == 'Home')
async def home(callback: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await send_main_menu(
            user_id=callback.from_user.id,
            user_name=callback.from_user.first_name,
            send_func=callback.message.answer
        )
    except Exception as e:
        await state.clear()
        logger.error(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É": {e}')
        await callback.message.answer('‚ùå –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')



async def main():
    dp.include_router(students_router)
    dp.include_router(admin_router)
    tryings = 0
    # while True:
    try:
        print("üöÄ Bot run")
        logger.info('–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î.')
        await dp.start_polling(bot)
    except TelegramNetworkError as e:
        tryings += 1
        logger.warning(f"‚ö†Ô∏è TelegramNetworkError: {e}. –°–ø—Ä–æ–±–∞ ‚Ññ{tryings}")
        await asyncio.sleep(1.0 * tryings)
    except Exception as e:
        logger.exception(f"üí• –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ polling: {e}")
        await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())