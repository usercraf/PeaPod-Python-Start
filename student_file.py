from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db_file import cur, base

from log_file import logger
from key_file import buttons_students


students_router = Router()

class Verification(StatesGroup):
    verification = State()

@students_router.callback_query(F.data == 'verification')
async def verification_student(callback: types.CallbackQuery, state: FSMContext):
    logger.info(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.first_name} (ID: {callback.from_user.id}) —Ö–æ—á–µ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.")
    await callback.message.answer('‚¨áÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó')
    await state.set_state(Verification.verification)


@students_router.message(Verification.verification)
async def verification_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="Home"))
    try:
        secret_code = cur.execute("""SELECT 1 FROM students WHERE secret_key=?""", (code,)).fetchone()
        if secret_code is None:
            logger.warning(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –≤–≤—ñ–≤ –Ω–µ–ø—Ä–∏–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –¥–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
            await message.answer('‚ùå –í–∏ –≤–≤–µ–ª–∏ –ø–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
            await state.set_state(Verification.verification)
        else:
            logger.info(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.first_name} (ID: {message.from_user.id}) –ø—Ä–æ–π—à–æ–≤ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é.")

            cur.execute("""UPDATE students SET verification=?, tg_id=? WHERE secret_key=?""", (1, int(message.from_user.id), code))
            base.commit()
            await state.clear()
            await message.answer('ü•≥ –í—ñ—Ç–∞—é –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞')
    except Exception as e:
        logger.error(f"[DB] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å SELECT: {e} —Ñ—É–Ω–∫—Ü—ñ—è - verification_code")
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                             "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=builder.as_markup())
        await state.clear()


@students_router.callback_query(F.data == 'chek_start')
async def chek_my_stars(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for key, value in buttons_students().items():
        builder.add(types.InlineKeyboardButton(text=value, callback_data=key))
    builder.adjust(1)
    try:
        data_stars = cur.execute("""SELECT points FROM students WHERE tg_id=?""", (callback.from_user.id,)).fetchone()
        await callback.message.edit_text(f'{callback.from_user.first_name} –Ω–∞ –í–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É {data_stars[0]} üåü.',
                                      reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f'–ü–æ–º–∏–ª–∫–∞ {e} –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑—ñ—Ä–æ–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}')
        await callback.message.edit_text('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                                         reply_markup=builder.as_markup())

